
---

### **Backend: Spring Boot + MySQL**

You’ve already set up the Spring Boot backend with MySQL. The next steps will ensure everything is ready for integration with a React frontend.

#### 1. **Enable CORS (Cross-Origin Resource Sharing)**
Since the frontend (React) will run on a different port (usually port 3000) than the backend (Spring Boot, usually port 8080), you need to enable CORS to allow communication between the frontend and backend.

You can create a global CORS configuration in your Spring Boot application by adding the following configuration class:

```java
package com.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:3000") // React frontend runs on port 3000
                .allowedMethods("GET", "POST", "PUT", "DELETE")
                .allowedHeaders("*");
    }
}
```

This configuration allows the frontend to make requests to the backend without CORS issues.

#### 2. **Test the Backend API**
Make sure your backend APIs are working with Postman (or any other API testing tool) by testing the existing endpoints, such as:
- **POST /students**: Add a new student.
- **GET /students**: Get all students.
- **GET /students/{roll}**: Get student by roll number.
- **DELETE /students/{roll}**: Delete a student by roll number.

Once these are confirmed to work, the backend is ready to serve data to the ReactJS frontend.

---

### **Frontend: ReactJS**

Let's set up the ReactJS frontend.

#### 1. **Create a ReactJS Project**

You can create a ReactJS project using `create-react-app`. If you don’t have `create-react-app` installed, you can do so using the following command:

```bash
npx create-react-app student-management-frontend
```

Once the project is created, navigate into the project folder:

```bash
cd student-management-frontend
```

#### 2. **Install Axios for HTTP Requests**
We'll use `Axios` to make HTTP requests from the React frontend to the Spring Boot backend. Install Axios by running:

```bash
npm install axios
```

#### 3. **Set up React Components**

Now, let’s create the necessary components for managing students.

##### **App.js**
Modify `src/App.js` to render the components for listing and managing students.

```jsx
import React, { useState, useEffect } from "react";
import axios from "axios";

function App() {
  const [students, setStudents] = useState([]);
  const [newStudent, setNewStudent] = useState({
    roll: "",
    name: "",
    email: "",
    section: "",
    studentClass: "",
  });

  // Fetch all students
  useEffect(() => {
    axios
      .get("http://localhost:8080/students")
      .then((response) => {
        setStudents(response.data);
      })
      .catch((error) => {
        console.error("There was an error fetching students!", error);
      });
  }, []);

  // Handle student form change
  const handleChange = (e) => {
    setNewStudent({
      ...newStudent,
      [e.target.name]: e.target.value,
    });
  };

  // Add a new student
  const handleAddStudent = (e) => {
    e.preventDefault();
    axios
      .post("http://localhost:8080/students", newStudent)
      .then((response) => {
        setStudents([...students, response.data]);
        setNewStudent({ roll: "", name: "", email: "", section: "", studentClass: "" });
      })
      .catch((error) => {
        console.error("There was an error adding the student!", error);
      });
  };

  // Delete a student
  const handleDeleteStudent = (roll) => {
    axios
      .delete(`http://localhost:8080/students/${roll}`)
      .then(() => {
        setStudents(students.filter((student) => student.roll !== roll));
      })
      .catch((error) => {
        console.error("There was an error deleting the student!", error);
      });
  };

  return (
    <div className="App">
      <h1>Student Management System</h1>

      <form onSubmit={handleAddStudent}>
        <input
          type="text"
          name="roll"
          value={newStudent.roll}
          placeholder="Roll"
          onChange={handleChange}
        />
        <input
          type="text"
          name="name"
          value={newStudent.name}
          placeholder="Name"
          onChange={handleChange}
        />
        <input
          type="email"
          name="email"
          value={newStudent.email}
          placeholder="Email"
          onChange={handleChange}
        />
        <input
          type="text"
          name="section"
          value={newStudent.section}
          placeholder="Section"
          onChange={handleChange}
        />
        <input
          type="text"
          name="studentClass"
          value={newStudent.studentClass}
          placeholder="Class"
          onChange={handleChange}
        />
        <button type="submit">Add Student</button>
      </form>

      <h2>All Students</h2>
      <ul>
        {students.map((student) => (
          <li key={student.roll}>
            {student.name} - {student.roll}
            <button onClick={() => handleDeleteStudent(student.roll)}>
              Delete
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

### **Explanation of the Frontend Code:**
- **State Management**: 
  - `students`: Stores the list of all students fetched from the backend.
  - `newStudent`: Stores the data for a new student that will be added.
  
- **HTTP Requests**:
  - The `useEffect` hook is used to fetch all students when the component is mounted.
  - `handleAddStudent` sends a POST request to add a new student to the backend.
  - `handleDeleteStudent` sends a DELETE request to remove a student by their roll number.

#### 4. **Run the React Application**

To run the React frontend, you can use the following command:

```bash
npm start
```

Your React application will now be running on `http://localhost:3000`. The Spring Boot backend is running on `http://localhost:8080`. If everything is set up correctly, you can interact with your full-stack application via the React frontend.

---

### **Summary of What We've Done:**
1. **Backend (Spring Boot + MySQL)**:
   - Added CORS support to allow the React app to communicate with the backend.
   - Ensured that Spring Boot exposes REST APIs for CRUD operations on students.
   
2. **Frontend (ReactJS)**:
   - Created a React app to display and manage students.
   - Integrated Axios to interact with the Spring Boot backend (POST, GET, DELETE requests).

3. **Running the Application**:
   - **Backend**: Run the Spring Boot app using `mvn spring-boot:run`.
   - **Frontend**: Run the React app using `npm start`.

---

### **Next Steps:**
- **Form Validation**: Implement form validation in React to ensure proper data input.
- **UI/UX**: Enhance the frontend by styling it with CSS or using libraries like Bootstrap or Material-UI.
- **Advanced Features**: Add features like updating student information, pagination for large lists, etc.
- **Authentication**: Implement user authentication (e.g., with JWT) to secure your APIs.

