name: "CI/CD + Security Analysis Workflow"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: '29 14 * * 0'

jobs:
  analyze:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      matrix:
        language: [java-kotlin, javascript-typescript, python]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache CodeQL Analysis
        uses: actions/cache@v3
        with:
          path: ~/.cache/codeql
          key: ${{ runner.os }}-codeql-${{ hashFiles('java/**/*.java', 'python/**/*.py', 'webdev/reactjs/**/*.js') }}
          restore-keys: |
            ${{ runner.os }}-codeql-

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          distribution: github
          languages: ${{ matrix.language }}

      # Build required for Java/Kotlin so CodeQL can analyze the bytecode
      - name: Build Java project (required for CodeQL)
        if: matrix.language == 'java-kotlin'
        run: mvn -f java/springboot/myspring/JpaProject/pom.xml clean install -DskipTests

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  java:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('java/springboot/myspring/JpaProject/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test Java Application
        run: mvn -f java/springboot/myspring/JpaProject/pom.xml clean install

  springboot:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      - name: Build Spring Boot Application
        run: mvn -f java/springboot/myspring/JpaProject/pom.xml clean install

      - name: Run Spring Boot Tests
        run: mvn -f java/springboot/myspring/JpaProject/pom.xml test

  python:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('python/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          cd python
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Tests
        run: |
          cd python
          python -m unittest discover

  reactjs:
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: webdev/reactjs/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('webdev/reactjs/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: |
          cd webdev/reactjs
          npm install

      - name: Run React Tests
        run: |
          cd webdev/reactjs
          npm test -- --watchAll=false
