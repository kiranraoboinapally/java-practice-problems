name: "CI/CD + Security Analysis Workflow"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '29 14 * * 0'  # Weekly schedule (adjust as needed)

jobs:
  # CodeQL Analysis Job (Parallelized)
  analyze:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      matrix:
        language: [java-kotlin, javascript-typescript, python]  # Languages to analyze in parallel
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache CodeQL analysis results for faster future runs
      - name: Cache CodeQL Analysis
        uses: actions/cache@v2
        with:
          path: ~/.cache/codeql
          key: ${{ runner.os }}-codeql-${{ hashFiles('**/*.java', '**/*.js', '**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-codeql-

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # Java Build & Test Job (Parallelized)
  java:
    runs-on: ubuntu-latest
    needs: analyze  # This job depends on the analyze job completion
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test Java Application
        run: mvn clean install  # Replace with your build command if different

  # ReactJS Build & Test Job (Parallelized)
  reactjs:
    runs-on: ubuntu-latest
    needs: analyze  # This job depends on the analyze job completion
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Cache Node.js modules for faster builds
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Run React Tests
        run: npm test -- --watchAll=false  # Modify according to your testing strategy

  # Spring Boot Build & Test Job (Parallelized)
  springboot:
    runs-on: ubuntu-latest
    needs: analyze  # This job depends on the analyze job completion
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      - name: Build Spring Boot Application
        run: mvn clean install  # Replace with your build command if different

      - name: Run Spring Boot Tests
        run: mvn test  # Modify if you're using a different test strategy

  # Python Build & Test Job (Fixing the Cache Issue)
  python:
    runs-on: ubuntu-latest
    needs: analyze  # This job depends on the analyze job completion
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Cache Python dependencies (using pip cache)
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python Tests
        run: |
          python -m unittest discover tests  # Modify this to match your test strategy
